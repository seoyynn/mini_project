<<<<Q1>>>>
1)
create table hr_emp(
    empno number(4) CONSTRAINT emp_empno_pk primary key,
    ename varchar2(10) not null,
    job varchar2 (9) not null,
    mgr number(4),
    hiredate date,
    sal number(7,2) not null,
    comm number(7,2),
    deptno number(2),
    foreign key (deptno) references hr_emp(deptno)
);

2)
create table hr_dept(
    deptno number(2) constraint dept_deptno_pk primary key,
    dname varchar2(14) not null,
    loc varchar2(13)
);

================================================

<<<<Q2>>>>
1)
Function -> 결과값 반환하는 함수
Procedure -> 결과값 반환하지않는 함수


2)
(create or replace function fn_deptnm (dept_id in int)
    return varchar)

<<답>>
select last_name, job_id, fn_deptnm(department_id), salary
from employees;

================================================

<<<<Q3>>>>
1)
create table empBak as
  select * from emp where 1 <> 1;
  
select * from empBak;

2)
create index ename_idx on EMPBAK(ename);


3)
create or replace trigger delete_emp
before delete ON emp for each row

4)

delete from emp
where empno = 102;

select * from empbak;

================================================

<<<<Q4>>>>
1)
select ename , job, sal
from emp
where salary > (select avg(salary)
from employees)
order by last_name;

2)
job뒤의 "=" 연산자를 "in"절로 수정해야한다.
서브쿼리가 1:1 비교가아니라 1:n개의 비교이기 때문이다

3)
 select rownum, emp.*
 from (select last_name, salary
       from employees
       order by salary desc) emp
 where rownum <= 5  

원인 : 서브쿼리를 작성하지 않았습니다, 서브쿼리(별명 emp) 안에 들어있는 정보로 조회를 해야하는데
        냅다 emp테이블에 있는 정보를 내놓아라 라고 명령하니 오류가 나는 것 같습니다

4)
select dept, sum(sal) 합계, avg(sal) 평균 , count(*) 인원수
from emp
group by dept
having sum(sal) > 28000
order by dept;

원인 : group by 는 having절에서 사용해야 한다. having이 group by의 조건절이기때문이다



================================================

<<<<Q5>>>>
5-1)
1) 열의 광범위한 값이 포함된경우
2) 조건절(where절), 조인이 자주 일어나는 경우
3) 대부분의 질의 결과가 2-4%미만의 경우
4) 열에 null 값이 많이 포함된 경우

5-2)
번호표 등 고유번호를 자동으로 생성하는곳에 사용되며, 공유가 가능하다
일반적으로 pk(primary key)에 많이 사용한다!

================================================

<<<<Q6>>>>
1)
create user smhrduser identified by 0000;

2)
grant create session to smhrduser;

3)
grant create table to smhrduser;

4)
drop user smhrduser cascade;

5)
select * from user_sys_privs;

